<?php

/**
 * This is the model base class for the table "tag_original_version".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "TagOriginalVersion".
 *
 * Columns in table "tag_original_version" available as properties of the model,
 * followed by relations of table "tag_original_version" available as properties of the model.
 *
 * @property integer $id
 * @property string $original_tag
 * @property integer $tag_use_id
 * @property string $comments
 * @property integer $user_id
 * @property string $created
 *
 * @property TagUse $tagUse
 * @property User $user
 */
abstract class BaseTagOriginalVersion_ extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'tag_original_version';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'TagOriginalVersion|TagOriginalVersions', $n);
	}

	public static function representingColumn() {
		return 'original_tag';
	}

	public function rules() {
		return array(
			array('tag_use_id', 'required'),
			array('tag_use_id, user_id', 'numerical', 'integerOnly'=>true),
			array('original_tag', 'length', 'max'=>64),
			array('comments, created', 'safe'),
			array('original_tag, comments, user_id, created', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, original_tag, tag_use_id, comments, user_id, created', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'tagUse' => array(self::BELONGS_TO, 'TagUse', 'tag_use_id'),
			'user' => array(self::BELONGS_TO, 'User', 'user_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'original_tag' => Yii::t('app', 'Original Tag'),
			'tag_use_id' => null,
			'comments' => Yii::t('app', 'Comments'),
			'user_id' => null,
			'created' => Yii::t('app', 'Created'),
			'tagUse' => null,
			'user' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('original_tag', $this->original_tag, true);
		$criteria->compare('tag_use_id', $this->tag_use_id);
		$criteria->compare('comments', $this->comments, true);
		$criteria->compare('user_id', $this->user_id);
		$criteria->compare('created', $this->created, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
			'pagination'=>array(
        'pageSize'=>Yii::app()->fbvStorage->get("settings.pagination_size"),
      ),
		));
	}
}