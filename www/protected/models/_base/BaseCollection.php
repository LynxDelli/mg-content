<?php

/**
 * This is the model base class for the table "collection".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Collection".
 *
 * Columns in table "collection" available as properties of the model,
 * followed by relations of table "collection" available as properties of the model.
 *
 * @property integer $id
 * @property string $name
 * @property integer $locked
 * @property string $more_information
 * @property integer $licence_id
 * @property integer $last_access_interval
 * @property string $created
 * @property string $modified
 *
 * @property Game[] $games
 * @property Licence $licence
 * @property Media[] $medias
 * @property SubjectMatter[] $subjectMatters
 */
abstract class BaseCollection extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'collection';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Collection|Collections', $n);
	}

	public static function representingColumn() {
		return 'name';
	}

	public function rules() {
		return array(
			array('name, created, modified', 'required'),
			array('locked, licence_id, last_access_interval', 'numerical', 'integerOnly'=>true),
			array('name', 'length', 'max'=>64),
			array('more_information', 'safe'),
			array('locked, more_information, licence_id, last_access_interval', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, name, locked, more_information, licence_id, last_access_interval, created, modified', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			/*'games' => array(self::MANY_MANY, 'Game', 'game_to_collection(collection_id, game_id)'),*/
			'licence' => array(self::BELONGS_TO, 'Licence', 'licence_id'),
			'medias' => array(self::MANY_MANY, 'Media', 'collection_to_media(collection_id, media_id)'),
			/*'subjectMatters' => array(self::MANY_MANY, 'SubjectMatter', 'collection_to_subject_matter(collection_id, subject_matter_id)'),*/
		);
	}

	public function pivotModels() {
		return array(
			/*'games' => 'GameToCollection',*/
			'medias' => 'CollectionToMedia',
			/*'subjectMatters' => 'CollectionToSubjectMatter',*/
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'name' => Yii::t('app', 'Name'),
			'locked' => Yii::t('app', 'Locked'),
			'more_information' => Yii::t('app', 'More Information'),
			'licence_id' => null,
			'last_access_interval' => Yii::t('app', 'Last Access Interval'),
			'created' => Yii::t('app', 'Created'),
			'modified' => Yii::t('app', 'Modified'),
			'games' => null,
			'licence' => null,
			'medias' => null,
			'subjectMatters' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('locked', $this->locked);
		$criteria->compare('more_information', $this->more_information, true);
		$criteria->compare('licence_id', $this->licence_id);
		$criteria->compare('last_access_interval', $this->last_access_interval);
		$criteria->compare('created', $this->created, true);
		$criteria->compare('modified', $this->modified, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
			'pagination'=>array(
        'pageSize'=>Yii::app()->fbvStorage->get("settings.pagination_size"),
      ),
		));
	}
}